#!/usr/bin/env python
from mnemonic import Mnemonic
from binascii import hexlify
from pycoin.key.BIP32Node import BIP32Node
from pycoin.key.key_from_text import key_from_text
from pycoin.networks.registry import network_for_netcode
from pycoin.encoding import to_bytes_32
from Crypto.Hash import keccak
import json

networks = [
    { 'code':'BTC', 'name':'Bitcoin','slip44':0 },
    { 'code':'LTC', 'name':'Litecoin','slip44':2 },
    { 'code':'DOGE', 'name':'Dogecoin','slip44':3 },
    { 'code':'DASH', 'name':'Dash','slip44':5 },
    { 'code':'FTC', 'name':'Feathercoin','slip44':8 },
    { 'code':'BC', 'name':'Blackcoin','slip44':10 },
    { 'code':'UNO', 'name':'Unobtanium','slip44':92 },
    { 'code':'JBS', 'name':'Jumbucks','slip44':26 },
    { 'code':'MZC', 'name':'Mazacoin','slip44':13 },
    { 'code':'RIC', 'name':'Riecoin','slip44':143 },
    { 'code':'ARG', 'name':'Argentum','slip44':45 },
    { 'code':'ZEC', 'name':'Zcash','slip44':133 },
    { 'code':'BTCD', 'name':'BitcoinDark','slip44':52 },
    { 'code':'ETH', 'name':'Ethereum','slip44':60 },
    { 'code':'XRP', 'name':'Ripple','slip44':144 },
    { 'code':'LBC', 'name':'LBRY Credits','slip44':140 },
]

def sha3(seed):
    sha3_256 = lambda x: keccak.new(digest_bits=256, data=x)
    return sha3_256(seed).digest()

def gen_wallet(words=None, passphrase=""):
    if not words:
        mnemonic = Mnemonic('english')
        words = mnemonic.generate(256)
    if mnemonic.to_entropy(words):
        seed = mnemonic.to_seed(words)
    data = {
        'mnemonic': str(words),
        'passphrase': str(passphrase),
        'seed': str(hexlify(seed),'utf-8'),
        'networks': {}
    }
    for network in networks:
        addresses = []
        if network['code'] is 'ETH':
            node = BIP32Node.from_master_secret(seed)
            bip44_node = node.subkey(44,True)
            bip44_account = \
                bip44_node.subkey(network['slip44'],True).subkey(0,True)
            bip32_account = bip44_account.subkey(0)
            for i in range(5):
                address = bip32_account.subkey(i)
                private_key = to_bytes_32(address.secret_exponent())
                addresses.append({
                    'address': "0x%s" % str(hexlify(
                        sha3(address.sec(True)[1:])[12:]
                    ),'utf-8').upper(),
                    "private_key": str(hexlify(private_key),'utf-8'),
                    "public_key": address.sec_as_hex(),
                })
        elif network['code'] is 'XRP' or 'LBC':
            node = BIP32Node.from_master_secret(seed)
            bip44_node = node.subkey(44,True)
            bip44_account = \
                bip44_node.subkey(network['slip44'],True).subkey(0,True)
            bip32_account = bip44_account.subkey(0)
            for i in range(5):
                address = bip32_account.subkey(i)
                addresses.append({
                    'address': address.bitcoin_address(),
                    "private_key": address.wif(),
                    "public_key": address.sec_as_hex(),
                })
        else:
            node = BIP32Node.from_master_secret(
                seed,
                network['code']
            )
            bip44_node = node.subkey(44,True)
            bip44_account = \
                bip44_node.subkey(network['slip44'],True).subkey(0,True)
            bip32_account = bip44_account.subkey(0)
            for i in range(5):
                address = bip32_account.subkey(i)
                addresses.append({
                    'address': address.bitcoin_address(),
                    "private_key": address.wif(),
                    "public_key": address.sec_as_hex(),
                })
        data['networks'][network['code']] = {
            "root_key": str(node.hwif(as_private=True)),
            "extended_public_key":
                bip32_account.wallet_key(as_private=False),
            "extended_private_key":
                bip32_account.wallet_key(as_private=True),
            "account_extended_public_key":
                bip44_account.wallet_key(as_private=False),
            "account_extended_private_key":
                bip44_account.wallet_key(as_private=True),
            "addresses": addresses
        }

    return data

if __name__ == "__main__":
    wallet = json.dumps(gen_wallet())
    print(wallet)
